import Address = require('./Address');
import { IdentifiedDataSerializableFactory, PortableFactory } from './serialization/Serializable';
import { TopicOverloadPolicy } from './proxy/topic/TopicOverloadPolicy';
/**
 * Group configuration of the cluster that this client connects.
 * A client will connect to only the cluster with these properties.
 */
export declare class GroupConfig {
    /**
     * Cluster group name.
     */
    name: string;
    /**
     * Cluster group password.
     */
    password: string;
}
export declare class SocketOptions {
}
export interface SSLOptions {
    /**
     * A string or Buffer containing the private key, certificate and CA certs of the client in PFX or PKCS12 format.
     */
    pfx?: any;
    /**
     * A string or Buffer containing the private key of the client in PEM format. (Could be an array of keys).
     */
    key?: any;
    /**
     * A string of passphrase for the private key or pfx.
     */
    passphrase?: string;
    /**
     *  A string or Buffer containing the certificate key of the client in PEM format. (Could be an array of certs).
     */
    cert?: any;
    /**
     * An array of strings or Buffers of trusted certificates in PEM format. If this is omitted several well known "root"
     * CAs will be used, like VeriSign. These are used to authorize connections.
     */
    ca?: any;
    /**
     * If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification
     * fails; err.code contains the OpenSSL error code. Default: true.
     */
    rejectUnauthorized?: boolean;
    /**
     * Servername for SNI (Server Name Indication) TLS extension.
     */
    servername?: string;
}
/**
 * Network configuration
 */
export declare class ClientNetworkConfig {
    /**
     * Client tries to connect the members at these addresses.
     */
    addresses: Address[];
    /**
     * While client is trying to connect initially to one of the members in the {@link addresses},
     * all might be not available. Instead of giving up, throwing Exception and stopping client, it will
     * attempt to retry as much as {@link connectionAttemptLimit} times.
     */
    connectionAttemptLimit: number;
    /**
     * Period for the next attempt to find a member to connect.
     */
    connectionAttemptPeriod: number;
    /**
     * Timeout value in millis for nodes to accept client connection requests.
     */
    connectionTimeout: number;
    /**
     * true if redo operations are enabled (not implemented yet)
     */
    redoOperation: boolean;
    /**
     * If true, client will behave as smart client instead of dummy client. Smart client sends key based operations
     * to owner of the keys. Dummy client sends all operations to a single node. See http://docs.hazelcast.org to
     * learn about smart/dummy client.
     */
    smartRouting: boolean;
    /**
     * Not implemented.
     */
    socketOptions: SocketOptions;
    /**
     * sslOptions is by default null which disables Ssl. A none null {@link SSLOptions} value enables Ssl.
     * @type {SSLOptions}
     */
    sslOptions: SSLOptions;
    constructor();
}
export declare class SerializationConfig {
    defaultNumberType: string;
    isBigEndian: boolean;
    dataSerializableFactories: {
        [id: number]: IdentifiedDataSerializableFactory;
    };
    portableFactories: {
        [id: number]: PortableFactory;
    };
    portableVersion: number;
    customSerializers: any[];
    globalSerializer: any;
}
export declare class ReliableTopicConfig {
    readBatchSize: number;
    overloadPolicy: TopicOverloadPolicy;
}
export declare class GlobalSerializerConfig {
}
export interface LifecycleListener {
    (event: string): void;
}
/**
 * Represents the format that objects are kept in this client's memory.
 */
export declare enum InMemoryFormat {
    /**
     * Objects are in native JS objects
     */
    OBJECT = 0,
    /**
     * Objects are in serialized form
     */
    BINARY = 1,
}
export declare enum EvictionPolicy {
    NONE = 0,
    LRU = 1,
    LFU = 2,
    RANDOM = 3,
}
export declare class NearCacheConfig {
    name: string;
    /**
     * 'true' to invalidate entries when they are changed in cluster,
     * 'false' to invalidate entries only when they are accessed.
     */
    invalidateOnChange: boolean;
    /**
     * Max number of seconds that an entry can stay in the cache until it is acceessed
     */
    maxIdleSeconds: number;
    inMemoryFormat: InMemoryFormat;
    /**
     * Maximum number of seconds that an entry can stay in cache.
     */
    timeToLiveSeconds: number;
    evictionPolicy: EvictionPolicy;
    evictionMaxSize: number;
    evictionSamplingCount: number;
    evictionSamplingPoolSize: number;
    toString(): string;
}
/**
 * Configurations for LifecycleListeners. These are registered as soon as client started.
 */
export declare class ListenerConfig {
    lifecycle: Function[];
    addLifecycleListener(listener: Function): void;
    getLifecycleListeners(): Function[];
}
/**
 * Top level configuration object of Hazelcast client. Other configurations items are properties of this object.
 */
export declare class ClientConfig {
    /**
     * Name of this client instance.
     */
    instanceName: string;
    properties: any;
    groupConfig: GroupConfig;
    networkConfig: ClientNetworkConfig;
    customCredentials: any;
    listeners: ListenerConfig;
    serializationConfig: SerializationConfig;
    reliableTopicConfigs: any;
    nearCacheConfigs: {
        [name: string]: NearCacheConfig;
    };
}
