/// <reference types="node" />
/// <reference types="bluebird" />
import stream = require('stream');
import Address = require('../Address');
import * as Promise from 'bluebird';
import { ClientNetworkConfig } from '../Config';
import { ClientConnectionManager } from './ClientConnectionManager';
export declare class ClientConnection {
    address: Address;
    localAddress: Address;
    socket: stream.Duplex;
    lastRead: number;
    heartbeating: boolean;
    private readBuffer;
    private logging;
    private clientNetworkConfig;
    private connectionManager;
    private closedTime;
    private connectedServerVersionString;
    private connectedServerVersion;
    private authenticatedAsOwner;
    constructor(connectionManager: ClientConnectionManager, address: Address, clientNetworkConfig: ClientNetworkConfig);
    /**
     * Returns the address of local port that is associated with this connection.
     * @returns
     */
    getLocalAddress(): Address;
    /**
     * Returns the address of remote node that is associated with this connection.
     * @returns
     */
    getAddress(): Address;
    /**
     * Connects to remote server and sets the hazelcast protocol.
     * @returns
     */
    connect(): Promise<ClientConnection>;
    write(buffer: Buffer): Promise<void>;
    setConnectedServerVersion(versionString: string): void;
    getConnectedServerVersion(): number;
    /**
     * Closes this connection.
     */
    close(): void;
    isAlive(): boolean;
    isAuthenticatedAsOwner(): boolean;
    setAuthneticatedAsOwner(asOwner: boolean): void;
    toString(): string;
    /**
     * Registers a function to pass received data on 'data' events on this connection.
     * @param callback
     */
    registerResponseCallback(callback: Function): void;
}
